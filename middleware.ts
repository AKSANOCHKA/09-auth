import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { refreshSession } from '@/lib/api/serverApi';

const AUTH_PAGES = ['/sign-in', '/sign-up'];
const PROTECTED_PREFIXES = ['/profile', '/notes'];

const isAuthPage = (pathname: string) => AUTH_PAGES.includes(pathname);
const isProtectedPath = (pathname: string) =>
  PROTECTED_PREFIXES.some((prefix) => pathname === prefix || pathname.startsWith(`${prefix}/`));

export async function middleware(request: NextRequest) {
  const { pathname, search } = request.nextUrl;
  const accessToken = request.cookies.get('accessToken')?.value;
  const refreshToken = request.cookies.get('refreshToken')?.value;

  // üîê –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —ñ –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—Ö–æ–¥—É ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /profile
  if (accessToken && isAuthPage(pathname)) {
    const destination = request.nextUrl.clone();
    destination.pathname = '/profile';
    return NextResponse.redirect(destination);
  }

  // üîí –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î accessToken —ñ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –Ω–∞ –∑–∞—Ö–∏—â–µ–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
  if (!accessToken && isProtectedPath(pathname)) {
    if (refreshToken) {
      try {
        // üîÑ –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Å–µ—Å—ñ—é
        const { accessToken: newAccessToken, refreshToken: newRefreshToken } = await refreshSession(refreshToken);

        const response = NextResponse.next();

        // ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ —É –∫—É–∫–∏
        response.cookies.set('accessToken', newAccessToken, {
          httpOnly: true,
          secure: true,
          path: '/',
          maxAge: 60 * 15, // 15 —Ö–≤–∏–ª–∏–Ω
        });

        response.cookies.set('refreshToken', newRefreshToken, {
          httpOnly: true,
          secure: true,
          path: '/',
          maxAge: 60 * 60 * 24 * 7, // 7 –¥–Ω—ñ–≤
        });

        return response;
      } catch (error) {
        // ‚ùå refreshToken –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –ø–æ–º–∏–ª–∫–∞ ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /sign-in
        const redirectUrl = request.nextUrl.clone();
        redirectUrl.pathname = '/sign-in';
        redirectUrl.searchParams.set('redirect', `${pathname}${search}`);
        return NextResponse.redirect(redirectUrl);
      }
    }

    // ‚ùå –ù–µ–º–∞—î accessToken —ñ refreshToken ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /sign-in
    const redirectUrl = request.nextUrl.clone();
    redirectUrl.pathname = '/sign-in';
    redirectUrl.searchParams.set('redirect', `${pathname}${search}`);
    return NextResponse.redirect(redirectUrl);
  }

  // ‚úÖ –£—Å—ñ —ñ–Ω—à—ñ –≤–∏–ø–∞–¥–∫–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–∞–ª—ñ
  return NextResponse.next();
}

export const config = {
  matcher: ['/profile/:path*', '/notes/:path*', '/sign-in', '/sign-up'],
};
